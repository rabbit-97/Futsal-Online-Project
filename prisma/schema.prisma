datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 서진님 프리즈마 카피

model Users {
  userId                  Int     @id @default(autoincrement())
  nickName                String  @unique
  id                      String  @unique
  password                String
  win                     Int     @default(0)  
  draw                    Int     @default(0)
  lose                    Int     @default(0)
  score                   Int     @default(2000)
  money                   Int     @default(100000)
  
  createdAt               DateTime @ default(now())

  team              Teams[]
  playerWaitingList PlayerWaitingLists?

  matchRequestsRequester matchRequest[] @relation("RequesterUser")
  matchRequestsOpponent  matchRequest[] @relation("OpponentUser")
}

model Teams {
  teamId                  Int  @id @default(autoincrement()) @map("characterId")
  userId                  Int  @map("userId")
  name                    String? 

  createdAt               DateTime @default(now())

  user    Users        @relation(fields:[userId], references: [userId])

  playerWaitingList   PlayerWaitingLists[]
  TeamInternals       TeamInternals[]
}
model TeamInternals {
  teamInternalId          Int  @id @default(autoincrement())
  teamId                  Int
  playerId                Int

  createdAt               DateTime @default(now())

  team    Teams    @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
  
}
model PlayerWaitingLists {
  playerWaitingListId     Int   @id @default(autoincrement())
  userId                  Int   @unique
  teamId                  Int
  playerId                Int
  count                   Int

  createdAt               DateTime @default(now())

  user  Users          @relation(fields: [userId], references: [userId], onDelete: Cascade)

  team  Teams          @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
}

model Players {
  playerId               Int    @id @default(autoincrement())
  name                   String
  speed                  Int
  goalDecisiveness       Int
  shootPower             Int
  defense                Int
  stamina                Int
  tier                   String

  createdAt              DateTime @updatedAt
}

// 추가로 매치 관련 데이터베이스 추가

model matchRequest {
  id            Int      @id @default(autoincrement())
  status        String   @default("대기중")
  createdAt     DateTime @default(now())

  requesterUser Users    @relation("RequesterUser", fields: [requesterUserId], references: [userId])
  requesterUserId Int

  opponentUser  Users?   @relation("OpponentUser", fields: [opponentUserId], references: [userId])
  opponentUserId Int?
}